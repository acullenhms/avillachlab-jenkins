<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.36">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.5.1"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.5.1">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.78">
    <script>import groovy.json.*;

pipeline {
    agent any 
    stages {
        stage(&apos;Acquire and lock deployment state&apos;) { 
            steps {
                script {
                    def stacksJson
                    def result = build job: &apos;Retrieve Deployment State&apos;
                    retrieveDepStateId = result.number
                    copyArtifacts filter: &apos;*&apos;, projectName: &apos;Retrieve Deployment State&apos;, selector: specific(&quot;&quot;+retrieveDepStateId)
                    sh &apos;cat stacks.json&apos;
                    stacksJson = new File(&apos;/var/jenkins_home/workspace/Retrieve Deployment State/stacks.json&apos;).text
                    def stacks = new JsonSlurperClassic().parseText(stacksJson)
                    def prod = stacks.environments.prod
                    println(stacks.environments.next_prod)
                    println(stacks.environments.prod)
                    stacks.environments.prod = stacks.environments.next_prod
                    stacks.environments.next_prod = prod
                    def target_prod_stack = stacks.environments.prod
                    def target_next_prod_stack = stacks.environments.next_prod
                    println(target_prod_stack)
                    println(target_next_prod_stack)
                    stacksJson = JsonOutput.toJson(stacks)
                    println(stacksJson)
                    build job: &apos;Move Prod DNS Pointer&apos;, parameters: [[$class: &apos;StringParameterValue&apos;, name: &apos;target_prod_stack&apos;, value: target_prod_stack],[$class: &apos;StringParameterValue&apos;, name: &apos;target_next_prod_stack&apos;, value: target_next_prod_stack]]
                    println(&quot;Moved pointer&quot;)
                    build job: &apos;Write Stack State&apos;, parameters: [[$class: &apos;StringParameterValue&apos;, name: &apos;stacks_json&apos;, value: stacksJson]]
                }
            }
        }
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>